{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/app/components/Globe.module.css [app-ssr] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"canvas\": \"Globe-module__KRF5xW__canvas\",\n  \"container\": \"Globe-module__KRF5xW__container\",\n  \"tooltip\": \"Globe-module__KRF5xW__tooltip\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["file:///Users/owentillger/Documents/GitHub/TruthGuard/src/app/components/Globe.tsx"],"sourcesContent":["// components/Globe.tsx\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport styles from './Globe.module.css';\n\n// Define the Story interface\ninterface Story {\n  id: string;\n  title: string;\n  category: 'DEFENSE' | 'ECONOMICS' | 'CYBER' | 'ENERGY' | 'POLITICS';\n  severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';\n  location: { lat: number; lng: number; name: string; country: string };\n  reliability: number;\n  bias: number;\n  impact: number;\n  sources: number;\n  timestamp: Date;\n  summary: string;\n  keyPlayers: string[];\n  sentiment: 'POSITIVE' | 'NEGATIVE' | 'NEUTRAL';\n  connections?: string[];\n  truthScore?: number;\n  abstractedContent?: string;\n  biasedClaims?: string[];\n  verifiedFacts?: string[];\n}\n\n// Interface for component props\ninterface GlobeProps {\n  stories?: Story[];\n}\n\n// Utility function to convert lat/lon to 3D vector\nconst latLonToVector3 = (lat: number, lon: number, radius: number): THREE.Vector3 => {\n  const phi = (90 - lat) * (Math.PI / 180);\n  const theta = (lon + 180) * (Math.PI / 180);\n  const x = -radius * Math.sin(phi) * Math.cos(theta);\n  const z = radius * Math.sin(phi) * Math.sin(theta);\n  const y = radius * Math.cos(phi);\n  return new THREE.Vector3(x, y, z);\n};\n\n// Color mapping for categories\nconst categoryColors: Record<Story['category'], number> = {\n  DEFENSE: 0xff0000, // Red\n  ECONOMICS: 0x00ff00, // Green\n  CYBER: 0x0000ff, // Blue\n  ENERGY: 0xffff00, // Yellow\n  POLITICS: 0xff00ff, // Magenta\n};\n\n// Size mapping for severity\nconst severitySizes: Record<Story['severity'], number> = {\n  CRITICAL: 0.04,\n  HIGH: 0.03,\n  MEDIUM: 0.02,\n  LOW: 0.01,\n};\n\nconst Globe: React.FC<GlobeProps> = ({ stories = [] }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const mountRef = useRef<HTMLDivElement>(null);\n  const [selectedStory, setSelectedStory] = useState<Story | null>(null);\n  const [isHovered, setIsHovered] = useState(false);\n\n  useEffect(() => {\n    if (!canvasRef.current || !mountRef.current) return;\n\n    // Initialize Three.js scene\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current,\n      alpha: true, // Transparent background\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    // Set up OrbitControls for rotation, zoom, and pan\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = false;\n    controls.dampingFactor = 0.05;\n    controls.rotateSpeed = 0.5;\n    controls.zoomSpeed = 1.0;\n    controls.panSpeed = 0.5;\n    controls.minDistance = 2;\n    controls.maxDistance = 5;\n\n    // Create globe\n    const globeRadius = 1;\n    const globeGeometry = new THREE.SphereGeometry(globeRadius, 64, 64);\n    const textureLoader = new THREE.TextureLoader();\n\n    // Load and apply texture\n    const earthTexture = textureLoader.load(\n      '/assets/8k_earth_daymap.jpg',\n      () => console.log('Texture loaded successfully')\n    );\n    earthTexture.anisotropy = renderer.capabilities.getMaxAnisotropy(); // Ensures proper texture rendering\n    const earthMaterial = new THREE.MeshPhongMaterial({\n      map: earthTexture,\n      shininess: 10,\n    });\n    const globe = new THREE.Mesh(globeGeometry, earthMaterial);\n    scene.add(globe);\n\n    // Add lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.5);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(5, 3, 5);\n    scene.add(directionalLight);\n\n    // Add hotspot markers\n    const markers: THREE.Mesh[] = [];\n    const markerMap = new Map<string, THREE.Mesh>();\n\n    stories.forEach((story) => {\n      const position = latLonToVector3(story.location.lat, story.location.lng, globeRadius * 1.02);\n      const markerGeometry = new THREE.SphereGeometry(severitySizes[story.severity], 16, 16);\n      const markerMaterial = new THREE.MeshBasicMaterial({ color: categoryColors[story.category] });\n      const marker = new THREE.Mesh(markerGeometry, markerMaterial);\n      marker.position.copy(position);\n      marker.userData = { story };\n      markers.push(marker);\n      markerMap.set(story.id, marker);\n      scene.add(marker);\n    });\n\n    // Add arc lines between connected stories\n    const arcMaterial = new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: 2 });\n    stories.forEach((story) => {\n      if (story.connections) {\n        story.connections.forEach((connectedId) => {\n          const relatedMarker = markerMap.get(connectedId);\n          if (relatedMarker) {\n            const start = markerMap.get(story.id)!.position;\n            const end = relatedMarker.position;\n            const curve = new THREE.QuadraticBezierCurve3(\n              start,\n              new THREE.Vector3().lerpVectors(start, end, 0.5).normalize().multiplyScalar(globeRadius * 1.5),\n              end\n            );\n            const points = curve.getPoints(50);\n            const arcGeometry = new THREE.BufferGeometry().setFromPoints(points);\n            const arc = new THREE.Line(arcGeometry, arcMaterial);\n            scene.add(arc);\n          }\n        });\n      }\n    });\n\n    // Set initial camera position\n    camera.position.z = 3;\n\n    // Handle mouse clicks for story selection\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    const onClick = (event: MouseEvent) => {\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(markers);\n      if (intersects.length > 0) {\n        const story = intersects[0].object.userData.story as Story;\n        setSelectedStory(story);\n      } else {\n        setSelectedStory(null);\n      }\n    };\n    window.addEventListener('click', onClick);\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      if (!isHovered) {\n        globe.rotation.y += 0.005; // Sweeping rotation when mouse is not hoveringsdf\n      }\n\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const onResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener('resize', onResize);\n\n    // Mouse hover to stop rotation\n    const onMouseEnter = () => setIsHovered(true);\n    const onMouseLeave = () => setIsHovered(false);\n\n    mountRef.current.addEventListener('mouseenter', onMouseEnter);\n    mountRef.current.addEventListener('mouseleave', onMouseLeave);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('click', onClick);\n      window.removeEventListener('resize', onResize);\n      mountRef.current.removeEventListener('mouseenter', onMouseEnter);\n      mountRef.current.removeEventListener('mouseleave', onMouseLeave);\n    };\n  }, [stories, isHovered]);\n\n  return (\n    <div className={styles.container} ref={mountRef}>\n      <canvas ref={canvasRef} className={styles.canvas} />\n      {selectedStory && (\n        <div className={styles.tooltip}>\n          <h3>{selectedStory.title}</h3>\n          <p><strong>Location:</strong> {selectedStory.location.name}, {selectedStory.location.country}</p>\n          <p><strong>Category:</strong> {selectedStory.category}</p>\n          <p><strong>Severity:</strong> {selectedStory.severity}</p>\n          <p><strong>Summary:</strong> {selectedStory.summary}</p>\n          <p><strong>Key Players:</strong> {selectedStory.keyPlayers.join(', ')}</p>\n          <p><strong>Sentiment:</strong> {selectedStory.sentiment}</p>\n          <p><strong>Reliability:</strong> {selectedStory.reliability}</p>\n          <p><strong>Bias:</strong> {selectedStory.bias}</p>\n          <p><strong>Impact:</strong> {selectedStory.impact}</p>\n          <p><strong>Sources:</strong> {selectedStory.sources}</p>\n          <p><strong>Timestamp:</strong> {selectedStory.timestamp.toLocaleString()}</p>\n          {selectedStory.truthScore && <p><strong>Truth Score:</strong> {selectedStory.truthScore}</p>}\n          {selectedStory.abstractedContent && <p><strong>Abstract:</strong> {selectedStory.abstractedContent}</p>}\n          {selectedStory.biasedClaims && selectedStory.biasedClaims.length > 0 && (\n            <p><strong>Biased Claims:</strong> {selectedStory.biasedClaims.join(', ')}</p>\n          )}\n          {selectedStory.verifiedFacts && selectedStory.verifiedFacts.length > 0 && (\n            <p><strong>Verified Facts:</strong> {selectedStory.verifiedFacts.join(', ')}</p>\n          )}\n          <button onClick={() => setSelectedStory(null)}>Close</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Globe;"],"names":[],"mappings":"AAAA,uBAAuB;;;;;AACvB;AACA;AAAA;AACA;AACA;;;;;;AA6BA,mDAAmD;AACnD,MAAM,kBAAkB,CAAC,KAAa,KAAa;IACjD,MAAM,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,GAAG;IACvC,MAAM,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,GAAG;IAC1C,MAAM,IAAI,CAAC,SAAS,KAAK,GAAG,CAAC,OAAO,KAAK,GAAG,CAAC;IAC7C,MAAM,IAAI,SAAS,KAAK,GAAG,CAAC,OAAO,KAAK,GAAG,CAAC;IAC5C,MAAM,IAAI,SAAS,KAAK,GAAG,CAAC;IAC5B,OAAO,IAAI,+IAAA,CAAA,UAAa,CAAC,GAAG,GAAG;AACjC;AAEA,+BAA+B;AAC/B,MAAM,iBAAoD;IACxD,SAAS;IACT,WAAW;IACX,OAAO;IACP,QAAQ;IACR,UAAU;AACZ;AAEA,4BAA4B;AAC5B,MAAM,gBAAmD;IACvD,UAAU;IACV,MAAM;IACN,QAAQ;IACR,KAAK;AACP;AAEA,MAAM,QAA8B,CAAC,EAAE,UAAU,EAAE,EAAE;IACnD,MAAM,YAAY,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAqB;IAC5C,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkB;IACxC,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAgB;IACjE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,UAAU,OAAO,IAAI,CAAC,SAAS,OAAO,EAAE;QAE7C,4BAA4B;QAC5B,MAAM,QAAQ,IAAI,+IAAA,CAAA,QAAW;QAC7B,MAAM,SAAS,IAAI,+IAAA,CAAA,oBAAuB,CAAC,IAAI,OAAO,UAAU,GAAG,OAAO,WAAW,EAAE,KAAK;QAC5F,MAAM,WAAW,IAAI,iKAAA,CAAA,gBAAmB,CAAC;YACvC,QAAQ,UAAU,OAAO;YACzB,OAAO;QACT;QACA,SAAS,OAAO,CAAC,OAAO,UAAU,EAAE,OAAO,WAAW;QACtD,SAAS,aAAa,CAAC,OAAO,gBAAgB;QAE9C,mDAAmD;QACnD,MAAM,WAAW,IAAI,qKAAA,CAAA,gBAAa,CAAC,QAAQ,SAAS,UAAU;QAC9D,SAAS,aAAa,GAAG;QACzB,SAAS,aAAa,GAAG;QACzB,SAAS,WAAW,GAAG;QACvB,SAAS,SAAS,GAAG;QACrB,SAAS,QAAQ,GAAG;QACpB,SAAS,WAAW,GAAG;QACvB,SAAS,WAAW,GAAG;QAEvB,eAAe;QACf,MAAM,cAAc;QACpB,MAAM,gBAAgB,IAAI,+IAAA,CAAA,iBAAoB,CAAC,aAAa,IAAI;QAChE,MAAM,gBAAgB,IAAI,+IAAA,CAAA,gBAAmB;QAE7C,yBAAyB;QACzB,MAAM,eAAe,cAAc,IAAI,CACrC,+BACA,IAAM,QAAQ,GAAG,CAAC;QAEpB,aAAa,UAAU,GAAG,SAAS,YAAY,CAAC,gBAAgB,IAAI,mCAAmC;QACvG,MAAM,gBAAgB,IAAI,+IAAA,CAAA,oBAAuB,CAAC;YAChD,KAAK;YACL,WAAW;QACb;QACA,MAAM,QAAQ,IAAI,+IAAA,CAAA,OAAU,CAAC,eAAe;QAC5C,MAAM,GAAG,CAAC;QAEV,eAAe;QACf,MAAM,eAAe,IAAI,+IAAA,CAAA,eAAkB,CAAC,UAAU;QACtD,MAAM,GAAG,CAAC;QACV,MAAM,mBAAmB,IAAI,+IAAA,CAAA,mBAAsB,CAAC,UAAU;QAC9D,iBAAiB,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG;QACpC,MAAM,GAAG,CAAC;QAEV,sBAAsB;QACtB,MAAM,UAAwB,EAAE;QAChC,MAAM,YAAY,IAAI;QAEtB,QAAQ,OAAO,CAAC,CAAC;YACf,MAAM,WAAW,gBAAgB,MAAM,QAAQ,CAAC,GAAG,EAAE,MAAM,QAAQ,CAAC,GAAG,EAAE,cAAc;YACvF,MAAM,iBAAiB,IAAI,+IAAA,CAAA,iBAAoB,CAAC,aAAa,CAAC,MAAM,QAAQ,CAAC,EAAE,IAAI;YACnF,MAAM,iBAAiB,IAAI,+IAAA,CAAA,oBAAuB,CAAC;gBAAE,OAAO,cAAc,CAAC,MAAM,QAAQ,CAAC;YAAC;YAC3F,MAAM,SAAS,IAAI,+IAAA,CAAA,OAAU,CAAC,gBAAgB;YAC9C,OAAO,QAAQ,CAAC,IAAI,CAAC;YACrB,OAAO,QAAQ,GAAG;gBAAE;YAAM;YAC1B,QAAQ,IAAI,CAAC;YACb,UAAU,GAAG,CAAC,MAAM,EAAE,EAAE;YACxB,MAAM,GAAG,CAAC;QACZ;QAEA,0CAA0C;QAC1C,MAAM,cAAc,IAAI,+IAAA,CAAA,oBAAuB,CAAC;YAAE,OAAO;YAAU,WAAW;QAAE;QAChF,QAAQ,OAAO,CAAC,CAAC;YACf,IAAI,MAAM,WAAW,EAAE;gBACrB,MAAM,WAAW,CAAC,OAAO,CAAC,CAAC;oBACzB,MAAM,gBAAgB,UAAU,GAAG,CAAC;oBACpC,IAAI,eAAe;wBACjB,MAAM,QAAQ,UAAU,GAAG,CAAC,MAAM,EAAE,EAAG,QAAQ;wBAC/C,MAAM,MAAM,cAAc,QAAQ;wBAClC,MAAM,QAAQ,IAAI,+IAAA,CAAA,wBAA2B,CAC3C,OACA,IAAI,+IAAA,CAAA,UAAa,GAAG,WAAW,CAAC,OAAO,KAAK,KAAK,SAAS,GAAG,cAAc,CAAC,cAAc,MAC1F;wBAEF,MAAM,SAAS,MAAM,SAAS,CAAC;wBAC/B,MAAM,cAAc,IAAI,+IAAA,CAAA,iBAAoB,GAAG,aAAa,CAAC;wBAC7D,MAAM,MAAM,IAAI,+IAAA,CAAA,OAAU,CAAC,aAAa;wBACxC,MAAM,GAAG,CAAC;oBACZ;gBACF;YACF;QACF;QAEA,8BAA8B;QAC9B,OAAO,QAAQ,CAAC,CAAC,GAAG;QAEpB,0CAA0C;QAC1C,MAAM,YAAY,IAAI,+IAAA,CAAA,YAAe;QACrC,MAAM,QAAQ,IAAI,+IAAA,CAAA,UAAa;QAC/B,MAAM,UAAU,CAAC;YACf,MAAM,CAAC,GAAG,AAAC,MAAM,OAAO,GAAG,OAAO,UAAU,GAAI,IAAI;YACpD,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,OAAO,GAAG,OAAO,WAAW,IAAI,IAAI;YACtD,UAAU,aAAa,CAAC,OAAO;YAC/B,MAAM,aAAa,UAAU,gBAAgB,CAAC;YAC9C,IAAI,WAAW,MAAM,GAAG,GAAG;gBACzB,MAAM,QAAQ,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK;gBACjD,iBAAiB;YACnB,OAAO;gBACL,iBAAiB;YACnB;QACF;QACA,OAAO,gBAAgB,CAAC,SAAS;QAEjC,iBAAiB;QACjB,MAAM,UAAU;YACd,sBAAsB;YAEtB,IAAI,CAAC,WAAW;gBACd,MAAM,QAAQ,CAAC,CAAC,IAAI,OAAO,kDAAkD;YAC/E;YAEA,SAAS,MAAM;YACf,SAAS,MAAM,CAAC,OAAO;QACzB;QACA;QAEA,uBAAuB;QACvB,MAAM,WAAW;YACf,MAAM,QAAQ,OAAO,UAAU;YAC/B,MAAM,SAAS,OAAO,WAAW;YACjC,SAAS,OAAO,CAAC,OAAO;YACxB,OAAO,MAAM,GAAG,QAAQ;YACxB,OAAO,sBAAsB;QAC/B;QACA,OAAO,gBAAgB,CAAC,UAAU;QAElC,+BAA+B;QAC/B,MAAM,eAAe,IAAM,aAAa;QACxC,MAAM,eAAe,IAAM,aAAa;QAExC,SAAS,OAAO,CAAC,gBAAgB,CAAC,cAAc;QAChD,SAAS,OAAO,CAAC,gBAAgB,CAAC,cAAc;QAEhD,UAAU;QACV,OAAO;YACL,OAAO,mBAAmB,CAAC,SAAS;YACpC,OAAO,mBAAmB,CAAC,UAAU;YACrC,SAAS,OAAO,CAAC,mBAAmB,CAAC,cAAc;YACnD,SAAS,OAAO,CAAC,mBAAmB,CAAC,cAAc;QACrD;IACF,GAAG;QAAC;QAAS;KAAU;IAEvB,qBACE,8OAAC;QAAI,WAAW,6IAAA,CAAA,UAAM,CAAC,SAAS;QAAE,KAAK;;0BACrC,8OAAC;gBAAO,KAAK;gBAAW,WAAW,6IAAA,CAAA,UAAM,CAAC,MAAM;;;;;;YAC/C,+BACC,8OAAC;gBAAI,WAAW,6IAAA,CAAA,UAAM,CAAC,OAAO;;kCAC5B,8OAAC;kCAAI,cAAc,KAAK;;;;;;kCACxB,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAkB;4BAAE,cAAc,QAAQ,CAAC,IAAI;4BAAC;4BAAG,cAAc,QAAQ,CAAC,OAAO;;;;;;;kCAC5F,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAkB;4BAAE,cAAc,QAAQ;;;;;;;kCACrD,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAkB;4BAAE,cAAc,QAAQ;;;;;;;kCACrD,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAiB;4BAAE,cAAc,OAAO;;;;;;;kCACnD,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAqB;4BAAE,cAAc,UAAU,CAAC,IAAI,CAAC;;;;;;;kCAChE,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAmB;4BAAE,cAAc,SAAS;;;;;;;kCACvD,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAqB;4BAAE,cAAc,WAAW;;;;;;;kCAC3D,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAc;4BAAE,cAAc,IAAI;;;;;;;kCAC7C,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAgB;4BAAE,cAAc,MAAM;;;;;;;kCACjD,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAiB;4BAAE,cAAc,OAAO;;;;;;;kCACnD,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAmB;4BAAE,cAAc,SAAS,CAAC,cAAc;;;;;;;oBACrE,cAAc,UAAU,kBAAI,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAqB;4BAAE,cAAc,UAAU;;;;;;;oBACtF,cAAc,iBAAiB,kBAAI,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAkB;4BAAE,cAAc,iBAAiB;;;;;;;oBACjG,cAAc,YAAY,IAAI,cAAc,YAAY,CAAC,MAAM,GAAG,mBACjE,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAuB;4BAAE,cAAc,YAAY,CAAC,IAAI,CAAC;;;;;;;oBAErE,cAAc,aAAa,IAAI,cAAc,aAAa,CAAC,MAAM,GAAG,mBACnE,8OAAC;;0CAAE,8OAAC;0CAAO;;;;;;4BAAwB;4BAAE,cAAc,aAAa,CAAC,IAAI,CAAC;;;;;;;kCAExE,8OAAC;wBAAO,SAAS,IAAM,iBAAiB;kCAAO;;;;;;;;;;;;;;;;;;AAKzD;uCAEe","debugId":null}}]
}